"""
Utilitaire pour la pr√©diction d'images avec le mod√®le Keras
"""
import os
import numpy as np
from PIL import Image
import tensorflow as tf
from tensorflow.keras.preprocessing import image
from django.conf import settings
import logging

logger = logging.getLogger(__name__)

class ImagePredictor:
    """
    Classe pour charger le mod√®le et faire des pr√©dictions d'images
    """
    
    def __init__(self):
        self.model = None
        self.model_path = os.path.join(settings.BASE_DIR, 'ml_models', 'best_model.keras')
        self.load_model()
    
    def load_model(self):
        """
        Charge le mod√®le Keras depuis le fichier
        """
        try:
            if os.path.exists(self.model_path):
                self.model = tf.keras.models.load_model(self.model_path)
                logger.info(f"‚úÖ Mod√®le charg√© avec succ√®s depuis: {self.model_path}")
                
                # Afficher les informations du mod√®le
                logger.info(f"üìä Shape d'entr√©e: {self.model.input_shape}")
                logger.info(f"üìä Shape de sortie: {self.model.output_shape}")
            else:
                logger.error(f"‚ùå Mod√®le non trouv√©: {self.model_path}")
                self.model = None
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du chargement du mod√®le: {str(e)}")
            self.model = None
    
    def preprocess_image(self, image_path):
        """
        Pr√©processe l'image pour la pr√©diction
        
        Args:
            image_path (str): Chemin vers l'image
            
        Returns:
            np.array: Image pr√©process√©e
        """
        try:
            # Charger l'image avec la taille attendue par le mod√®le (224x224)
            img = image.load_img(image_path, target_size=(224, 224))
            
            # Convertir en array et normaliser
            img_array = image.img_to_array(img)
            img_array = img_array / 255.0  # Normalisation [0,1]
            
            # Ajouter la dimension batch
            img_array = np.expand_dims(img_array, axis=0)
            
            logger.info(f"üì∑ Image pr√©process√©e: {img_array.shape}")
            return img_array
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du pr√©processing: {str(e)}")
            return None
    
    def predict(self, image_path):
        """
        Fait une pr√©diction sur l'image
        
        Args:
            image_path (str): Chemin vers l'image
            
        Returns:
            dict: R√©sultat de la pr√©diction avec label et confiance
        """
        if self.model is None:
            logger.error("‚ùå Mod√®le non charg√©")
            return {
                'error': 'Mod√®le non disponible',
                'label': 'Error',
                'confidence': 0.0
            }
        
        try:
            # Pr√©processer l'image
            processed_image = self.preprocess_image(image_path)
            if processed_image is None:
                return {
                    'error': 'Erreur de pr√©processing',
                    'label': 'Error',
                    'confidence': 0.0
                }
            
            # Faire la pr√©diction
            prediction = self.model.predict(processed_image, verbose=0)[0][0]
            
            # Interpr√©ter le r√©sultat selon votre sp√©cification
            # "Good" si pred > 0.5 else "anomaly"
            if prediction > 0.5:
                label = "Good"
                confidence = prediction  # La confiance pour Good
            else:
                label = "anomaly"
                confidence = 1 - prediction  # La confiance pour anomaly
            
            result = {
                'label': label,
                'confidence': float(confidence),
                'raw_prediction': float(prediction)
            }
            
            logger.info(f"üîç Pr√©diction: {label} (confiance: {confidence*100:.2f}%)")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la pr√©diction: {str(e)}")
            return {
                'error': str(e),
                'label': 'Error',
                'confidence': 0.0
            }
    
    def is_model_available(self):
        """
        V√©rifie si le mod√®le est disponible
        """
        return self.model is not None


# Instance globale du pr√©dicteur
predictor = ImagePredictor()
